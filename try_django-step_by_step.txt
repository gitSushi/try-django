from Try_Django-2.2 : https://www.youtube.com/watch?v=-oQvMHpKkms
Github Repository : https://github.com/codingforentrepreneurs/Try-Django-2.2
_______________________________________________________________________________________________________________________________________________________
• cd C:\Users\jo\Desktop\openclassrooms\from_tutorial\try_django

(install pipenv : pip install pipenv)

• create a virtual environment
pipenv --python 3.7 install django==3.0

(
To activate this project's virtualenv, run pipenv shell.
To deactivate : deactivate
Alternatively, run a command inside the virtualenv with pipenv run.
)

• Activate this project's virtualenv :
pipenv shell

• mkdir src && cd src

• django-admin startproject try_django .

• python manage.py runserver

(
You have 17 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.
Run 'python manage.py migrate' to apply them.
[...]
Starting development server at http://127.0.0.1:8000/
Quit the server with CTRL-BREAK.
)

!!!
Error: [WinError 10013] Une tentative d’accès à un socket de manière interdite par ses autorisations d’accès a été tentée

-> python manage.py runserver 8080
(
Solution from :
https://stackoverflow.com/a/6778708
)
!!!

• in VSCode save a workspace C:\Users\jo\Desktop\openclassrooms\from_tutorial\try_django

• cd C:\Users\jo\Desktop\openclassrooms\from_tutorial\try_django\src
python manage.py createsuperuser
jo
lossushi37@gmail.com
7ry-dj4ng0


• python manage.py migrate

• add views.py in src/try_django

• pylint in VSCode : run
C:/Users/jo/.virtualenvs/try_django-YzOAHvvR/Scripts/python.exe c:\Users\jo\.vscode\extensions\ms-python.python-2020.6.91350\pythonFiles\pyvsc-run-isolated.py pip install -U pylint

_______________________________________________________________________________________________________________________________________________________
8. path vs re_path vs url

re_path for regular expression path
path is the newer django version of url
_______________________________________________________________________________________________________________________________________________________
9. Your First Template

• in src add templates folder

os.path.join(BASE_DIR, 'templates')
(
adds the directory to templates folder
BASE_DIR = 'C:\Users\jo\Desktop\openclassrooms\from_tutorial\try_django\src'
)
_______________________________________________________________________________________________________________________________________________________
12. Render Context in Templates

in views.py
'''python
def home_page(request):
  new_title = "My Own Greeting ..."
  return render(request, "hello_world.html", {"title": new_title})
'''

in hello_world.html
'''html
<h1>{{title}}</h1>
'''
_______________________________________________________________________________________________________________________________________________________
13 - Stay DRY with Templates

• base.html is the convention for DRY (Don't Repeat Yourself) in Django
'''python from views.py
from django.shortcuts import render
'''
-> allows the following ('''python from django.http import HttpResponse ''' would NOT)

{% extends "base.html" %}

{% block %}
<p>Replaced by ME ME ME</p>
{% endblock %}
_______________________________________________________________________________________________________________________________________________________
14 - Rendering Any Kind of Template

'''python
from django.template.loader import get_template
'''
_______________________________________________________________________________________________________________________________________________________
16 - Built-In Template Tags

• Check https://docs.djangoproject.com/en/3.0/ref/templates/builtins/

• Note : logics (like conditions) usually go in the views.py
_______________________________________________________________________________________________________________________________________________________
17 - Your First App

• List of subcommands :
'''anaconda
python manage.py
'''

• add an app (~component)
'''anaconda
python manage.py startapp [name]
'''
( name = blog )

• add class in models.py

• add in settings.py under INSTALLED_APPS
'blog',

• after every change to models.py save and run these two commands :
'''anaconda
python manage.py makemigrations
python manage.py migrate
'''
_______________________________________________________________________________________________________________________________________________________
18 - Save to the Database

• 
_______________________________________________________________________________________________________________________________________________________
23 - Get Object or 404

• handling 404 pages

'''python
from django.shortcuts import render , get_object_or_404
obj = get_object_or_404(BlogPost, id=post_id)
'''
_______________________________________________________________________________________________________________________________________________________
27 - CRUD & Views

• 
_______________________________________________________________________________________________________________________________________________________
!!!
Solving Some Linting Problems On VSCode

• run
pip install pylint-django

• add following to .vscode/settings.json
"python.linting.pylintArgs": [
    "--disable=C0111", // missing docstring
    "--load-plugins=pylint_django,pylint_celery",
 ],

_______________________________________________________________________________________________________________________________________________________
31 - Include URLs

• Create a urls.py in blog folder for all blog/ patterns
_______________________________________________________________________________________________________________________________________________________
32 - In App Templates

• !!! WATCH AGAIN !!!
_______________________________________________________________________________________________________________________________________________________
REMINDER

• in terminal : access the django database

>>> python manage.py shell
>>> from blog.models import BlogPost
>>> obj = BlogPost.objects.all()
>>> print(obj)
<QuerySet [<BlogPost: BlogPost object (1)>, <BlogPost: BlogPost object (2)>, <BlogPost: BlogPost object (3)>, <BlogPost: BlogPost object (4)>, <BlogPost: BlogPost object (5)>]>
>>> print(obj[1])
BlogPost object (2)
>>> print(obj[1].title)
Second post
>>> exit()
_______________________________________________________________________________________________________________________________________________________
39 - Associate Blog Post to a User with Foreign Keys 

• for models.py (like a ForeignKey) :

'''python
from django.conf import settings
User = settings.AUTH_USER_MODEL
user = models.ForeignKey(User, default=1, null=True, on_delete=models.SET_NULL)
'''

• for anything else :

'''anaconda
>>> from django.contrib.auth import get_user_model
>>> User = get_user_model()
>>> User
<class 'django.contrib.auth.models.User'>
'''

• furthermore (benefits of using user model)

'''anaconda
>>> j = User.objects.first()
>>> j
<User: jo>

(reverse access to all posts from the user. ForeignKey allow this kind of dynamic lookups. (BlogPost model wasn't imported. It is in User class))
(blogpost_set -> lowerkey chosen model then add _set to get the queryset)

>>> j.blogpost_set.all()
<QuerySet [<BlogPost: BlogPost object (1)>, <BlogPost: BlogPost object (2)>, <BlogPost: BlogPost object (3)>, <BlogPost: BlogPost object (4)>, <BlogPost: BlogPost object (5)>]>

>>> from blog.models import BlogPost
>>> qs = BlogPost.objects.filter(user__id=j.id)
>>> qs
<QuerySet [<BlogPost: BlogPost object (1)>, <BlogPost: BlogPost object (2)>, <BlogPost: BlogPost object (3)>, <BlogPost: BlogPost object (4)>, <BlogPost: BlogPost object (5)>]>
'''
_______________________________________________________________________________________________________________________________________________________
49 - Model Managers and Custom QuerySets

• in models.py and views.py

'''python
from django.utils import timezone
def blog_post_list_view(request):
  now = timezone.now()
  qs = BlogPost.objects.filter(publish_date__lte=now)
'''

• model manager

'''python
from django.utils import timezone
class BlogPostManager(models.Manager):
  def published(self):
    now = timezone.now()
    return self.get_queryset().filter(publish_date__lte=now)
'''
_______________________________________________________________________________________________________________________________________________________
51 - Static Files and Uploading Files

• !!! WATCH AGAIN !!!  ->  !!! LOTS !!!

• Check managing static files for production
https://docs.djangoproject.com/en/3.0/howto/static-files/
_______________________________________________________________________________________________________________________________________________________